import com.novoda.gradle.command.Files

buildscript {
    repositories {
//        mavenLocal()
        google()
        mavenCentral()
    }
    dependencies {
//        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.2-SNAPSHOT'
        classpath 'com.novoda:gradle-android-command-plugin:2.0.1'
    }
}

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
}

def getPropertyIfDefined(property, defaultValue) {
    if (project.hasProperty(property)) {
        return project.properties[property]
    }
    return defaultValue
}

android {
    compileSdkVersion project.compileSdkVersion
    useLibrary 'android.test.runner'
    useLibrary 'android.test.mock'
    useLibrary 'android.test.base'

    defaultConfig {
        applicationId "roshdev.expenses.moneytracker"
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        versionCode project.versionCode
        versionName project.versionName

        buildConfigField "String", "DISTRIBUTION", "\"GITHUB\""
        testInstrumentationRunner "org.totschnig.myexpenses.MyTestRunner"

        vectorDrawables.useSupportLibrary = true
        resConfigs 'en', 'ar', 'bg', 'ca', 'cs', 'da', 'de', 'el', 'es', 'eu', 'fr', 'hr', 'hu', 'in', 'it', 'iw', 'ja', 'km', 'kn', 'ko', 'ms', 'pl', 'pt_BR', 'pt_PT', 'ro', 'ru', 'si', 'ta', 'te', 'tr', 'uk', 'vi', 'zh_CN', 'zh_HK', 'zh_TW'
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    /*signingConfigs {
        release {
            storeFile file(getPropertyIfDefined("RELEASE_STORE_FILE", "unknown"))
            storePassword getPropertyIfDefined("RELEASE_STORE_PASSWORD", "unknown")
            keyAlias getPropertyIfDefined("RELEASE_KEY_ALIAS", "unknown")
            keyPassword getPropertyIfDefined("RELEASE_KEY_PASSWORD", "unknown")

        }
    }*/
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-project.txt'
            //signingConfig signingConfigs.release
            manifestPlaceholders = [appName: "@string/app_name", debug: "false"]
            applicationIdSuffix ""
            //ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "BUILD_DATE", "\"" + getDate() + "\""
        }
        debug {
            applicationIdSuffix ""
            manifestPlaceholders = [appName: "@string/app_name", debug: "false"]
            buildConfigField "int", "TEST_SCENARIO", getPropertyIfDefined('testScenario', "1")
            buildConfigField "String", "BUILD_DATE", "\"now\""
            buildConfigField "String", "OPEN_EXCHANGE_RATES_API_KEY", "\"" + getPropertyIfDefined('OPEN_EXCHANGE_RATES_API_KEY', "") + "\""
            buildConfigField "boolean", "BETA", getPropertyIfDefined("BETA", "false")
        }
    }

    buildTypes.each { type ->
        type.resValue 'string', 'application_id', defaultConfig.applicationId + type.applicationIdSuffix
        type.resValue "string", 'sync_account_type', defaultConfig.applicationId + type.applicationIdSuffix + ".sync"
    }

    flavorDimensions "textRecognition"

    productFlavors {
        intern {
            dimension "textRecognition"
        }
        extern {
            dimension "textRecognition"
        }
    }

    packagingOptions {
        resources {
            //excludes += ['/META-INF/{AL2.0,LGPL2.1}', 'META-INF/*', '**/attach_hotspot_windows.dll', 'META-INF/licenses/**', 'META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
        jniLibs {
            excludes += ['META-INF/*', 'META-INF/licenses/**']
        }
    }

    variantFilter { variant ->
        if (project.hasProperty("buildType") && variant.buildType.name != project.ext.buildType) {
            setIgnore(true)
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
            all {
                maxHeapSize = "1024m"
            }
        }
    }

    buildFeatures {
        viewBinding true
        compose true
    }
    //It does not seem possible to define dynamicFeatures dependent on variant
    //If you want to build intern variant, you need to include mlkit (+ at least one of ':mlkit_latn', ':mlkit_han', ':mlkit_deva', ':mlkit_jpan', ':mlkit_kore') and/or tesseract module
    //drive for Sync with Google Drive
    //dynamicFeatures = [':ocr', ':webui', ':dropbox', ':webdav']
    dynamicFeatures = []

    composeOptions {
        kotlinCompilerExtensionVersion compose_compiler_version
    }

    lint {
        abortOnError true
        checkDependencies true
        disable 'InvalidPackage', 'MissingQuantity', 'MissingTranslation', 'ImpliedQuantity'
    }
    namespace 'org.totschnig.myexpenses'
}

kotlin.sourceSets.all {
    languageSettings.optIn("kotlin.RequiresOptIn")
}

configurations.all {
    exclude group: "com.google.android.material", module: "material"
}

//uncomment if you want to have Android log in stdout
tasks.withType(Test) {
    systemProperty "robolectric.logging", "stdout"
}

dependencies {
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$desugarVersion"
    implementation project(':transactionscontract')
    implementation "com.jakewharton:butterknife:$butterknifeVersion"
    implementation 'com.squareup.phrase:phrase:1.1.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.activity:activity-compose:1.5.1'
    implementation "com.google.android.material:compose-theme-adapter:1.1.18"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    implementation "com.google.accompanist:accompanist-drawablepainter:0.23.1"
    kapt "com.jakewharton:butterknife-compiler:$butterknifeVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'frankiesardo:icepick:3.2.0'
    kapt 'frankiesardo:icepick-processor:3.2.0'
    implementation 'com.google.code.gson:gson:2.9.0'

    api 'com.google.auto.value:auto-value-annotations:1.8.1'
    kapt 'com.google.auto.value:auto-value:1.7'

    kapt 'com.ryanharter.auto.value:auto-value-gson:1.3.0'
    api 'com.ryanharter.auto.value:auto-value-gson-runtime:1.3.0'

    kapt 'com.gabrielittner.auto.value:auto-value-cursor:1.1.0'
    implementation 'com.gabrielittner.auto.value:auto-value-cursor-annotations:1.1.0'

    kapt 'com.ryanharter.auto.value:auto-value-parcel:0.2.8'

    implementation 'com.github.mtotschnig:StickyListHeaders:2.8.0'
    implementation 'com.github.mtotschnig:MaterialSeekBarPreference:bc211774e5'
    implementation project(':PlayLicensingOrig')
    implementation 'com.itextpdf:itextpdf:5.5.13.1'
    implementation "ch.acra:acra-mail:$acraVersion"
    implementation "ch.acra:acra-dialog:$acraVersion"
    implementation "org.apache.commons:commons-lang3:$commonsLang"
    implementation 'org.apache.commons:commons-csv:1.8'
    implementation "org.apache.commons:commons-text:$commonsText"
    api "com.squareup.picasso:picasso:$picassoVersion"
    implementation 'com.github.mtotschnig:MPAndroidChart:6fcf34d9d4'
    implementation 'com.github.mtotschnig:Caldroid:2fcb748f0e'
    api('io.github.eltos:simpledialogfragments:3.5.2')

    //noinspection GradleDependency
    implementation 'com.annimon:stream:1.2.1'
    implementation 'com.getkeepsafe.taptargetview:taptargetview:1.13.2'

    implementation 'org.apache.commons:commons-collections4:4.4'

    api "com.jakewharton.timber:timber:$timberVersion"

    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'com.github.tony19:logback-android:2.0.0'

    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.recyclerview:recyclerview:$recyclerview"
    implementation 'androidx.cardview:cardview:1.0.0'
    api 'com.github.mtotschnig:material-components-android:bug_1913_1.5-SNAPSHOT'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    api 'androidx.preference:preference-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    implementation project(path: ':setupwizard')

    //licence validation
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

    implementation 'com.github.lzyzsd:circleprogress:1.2.1'

    implementation 'com.squareup.sqlbrite3:sqlbrite:3.2.0'
    implementation 'app.cash.copper:copper-flow:1.0.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    //https://github.com/romandanylyk/PageIndicatorView/issues/141
    implementation 'com.github.romandanylyk:PageIndicatorView:b1bad589b5'

    implementation 'com.afollestad.material-dialogs:core:3.3.0'

    // dynamic feature module compilation fails with
    //Cannot access 'com.vmadalin.easypermissions.EasyPermissions.PermissionCallbacks' which is a supertype of 'org.totschnig.myexpenses.activity.BaseActivity'
    api 'com.vmadalin:easypermissions-ktx:1.0.0'

    implementation("org.jetbrains.kotlinx:kotlinx-html:0.7.3")
    implementation("io.arrow-kt:arrow-core:1.0.1")

    androidTestImplementation 'tools.fastlane:screengrab:2.1.1'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxTextExtJunit"
    androidTestImplementation "androidx.test:runner:1.5.0-alpha04"
    androidTestUtil "androidx.test:orchestrator:1.4.1"
    androidTestImplementation "androidx.test:rules:$androidSupportTestVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion")
    //https://github.com/android/android-test/issues/861#issuecomment-952431166
    androidTestImplementation "com.google.android.apps.common.testing.accessibility.framework:accessibility-test-framework:4.0.0"
    //androidTestImplementation  "androidx.test.espresso.idling:idling-concurrent:$espressoVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    androidTestImplementation('com.adevinta.android:barista:4.2.0') {
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }

    testImplementation('com.adevinta.android:barista:4.2.0') {
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }

    testImplementation "junit:junit:$junitVersion"
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    testImplementation "androidx.test:core:$androidSupportTestVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    //noinspection GradleDependency
    androidTestImplementation "org.assertj:assertj-core:$assertjVersionAndroid"
    androidTestImplementation "com.google.truth:truth:$truthVersion"
    testImplementation "com.google.truth:truth:$truthVersion"
    api "androidx.core:core-ktx:$ktxVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    testImplementation "androidx.test:rules:$androidSupportTestVersion"
    testImplementation "androidx.test.ext:junit:$androidxTextExtJunit"

    // Room components
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$archLifecycleVersion"

    androidTestImplementation "androidx.arch.core:core-testing:$androidxArchVersion"

    // ViewModel Kotlin support
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"


    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    //implementation "androidx.activity:activity-ktx:$activity_version"
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"

    //Mlkit / Drive
    //implementation "com.google.android.gms:play-services-base:18.0.1"
    //implementation "com.google.mlkit:vision-interfaces:+"
    //implementation "com.google.guava:guava:30.1.1-android"

    //noinspection GradleDependency
    implementation 'com.github.mtotschnig:Android-Image-Cropper:2243115896'
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd-HHmm')
    return formattedDate
}

//apply plugin: 'com.jakewharton.hugo'
apply plugin: 'com.novoda.android-command'

task copyFileForFixture(type: Files) {
    script {
        push "tests/script/screenshot.jpg", "/sdcard/Android/data/org.totschnig.myexpenses.fortest/files/screenshot.jpg"
    }
}

//For Drive
//apply plugin: 'com.google.gms.google-services'

task echoPublishTag() {
    doLast {
        println "ChangeLog.install/bin/ChangeLog fdroid ${versionName} ${versionCode}"
        println "git add metadata/*/changelogs/${versionCode}.txt"
        println "git commit -m \"Release ${versionName}\""
        println "git push"
        println "git tag r${versionCode}; git push origin r${versionCode}"
    }
}
